<?xml version="1.0" encoding="UTF-8"?>
<implementation>
    <functions>
        -- -------------------------------------------------------------------------------------------------------------------------
        -- Deus Ex Machina (II)
        -- https://github.com/toggledbits/DeusExMachina
        -- Original code and releases 1.x by Andy Lintner (beowulfe) Version 2.0 and beyond by Patrick Rigney (rigpapa).
        -- A big thanks to Andy for passing the torch so that this great plug-in can live on.
        -- -------------------------------------------------------------------------------------------------------------------------
        
        SID = "urn:toggledbits-com:serviceId:DeusExMachina1"
        SWITCH_SID = "urn:upnp-org:serviceId:SwitchPower1"
        
        STATE_STANDBY = 0
        STATE_IDLE = 1
        STATE_CYCLE = 2
        STATE_SHUTDOWN = 3
        
        runStamp = 0
        
        local function checkVersion()
            local ui7Check = luup.variable_get(SID, "UI7Check", lul_device) or ""
            if ui7Check == "" then
                luup.variable_set(SID, "UI7Check", "false", lul_device)
                ui7Check = "false"
            end
            if( luup.version_branch == 1 and luup.version_major == 7 and ui7Check == "false") then
                luup.variable_set(SID, "UI7Check", "true", lul_device)
                luup.attr_set("device_json", "D_DeusExMachina1_UI7.json", lul_device)
                luup.reload()
            end
        end
        
        -- Get numeric variable, or return default value if not set or blank
        local function getVarNumeric( name, dflt )
            local s = luup.variable_get(SID, name, lul_device)
            if (s == nil or s == "") then return dflt end
            s = tonumber(s, 10)
            if (s == nil) then return dflt end
            return s
        end
        
        -- Shortcut function to return state of Enabled variable
        local function isEnabled() 
            return getVarNumeric("Enabled", 0)
        end
        
        -- DEM cycles lights between sunset and the user-specified off time. This function returns 0
        -- if the current time is between sunset and off; otherwise 1.
        local function isBedtime()
            local testing = getVarNumeric("TestMode", 0)
            if (testing ~= 0) then luup.log('DeusExMachina: TestMode on') end
            if (not (testing or luup.is_night())) then
                return 1
            end
            -- rigpapa 2016-05-06: keep LightsOutTime in ms for compatibility with
            --                     existing configs; everything else simplified.
            local bedtime_tmp = luup.variable_get(SID, "LightsOutTime", lul_device)
            if (bedtime_tmp == nil) then
                return 1
            end
            local bedtime = tonumber(bedtime_tmp) / 1000
            local date = os.date('*t', luup.sunset())
            local sunset = (date['hour'] * 60 + date['min']) * 60
            if (testing ~= 0) then 
                local s = getVarNumeric( "TestSunset", nil )
                if (s ~= nil) then sunset = tonumber(s,10) * 60 end
                luup.log('DeusExMachina:isBedtime: testing mode sunset time is ' .. tostring(sunset))
            end
            date = os.date('*t')
            local time = (date['hour'] * 60 + date['min']) * 60
            if (testing ~= 0) then          
                luup.log('DeusExMachina: time=' .. tostring(time) .. ', sunset=' .. tostring(sunset) .. ', bedtime=' .. tostring(bedtime))
            end
            local ret = 1;
            if (bedtime &gt; sunset) then
                    -- Case 1: bedtime is after sunset (i.e. between sunset and midnight)
                if (time &gt;= sunset and time &lt; bedtime) then
                    ret = 0
                end
            else
                    -- Case 2: bedtime is after midnight
                if (time &gt;= sunset or time &lt; bedtime) then
                    ret = 0
                end
            end
            if (testing ~= 0) then luup.log("DeusExMachina:isBedtime() returning " .. tostring(ret)) end
            return ret
        end

        -- Get the list of controlled devices from our device state, parse to table of device IDs.
        local function getDeviceList()
            local s = luup.variable_get(SID, "Devices", lul_device) or ""
            local t = {}
            local k = 1
            local n = 0
            repeat
                local i = string.find(s, ',', k)
                if (i == nil) then
                    table.insert(t, string.sub(s, k, -1))
                    n = n + 1
                    break
                else
                    table.insert(t, string.sub(s, k, i-1))
                    n = n + 1
                    k = i + 1
                end
            until k > string.len(s)
            return t, n
        end

        -- Turn off a light, if any is on. Returns 1 if there are more lights to turn off; otherwise 0.
        local function turnOffLight()
            local devs, max
            devs, max = getDeviceList()
            if (max &gt; 0) then
                local i
                local on = {}
                local n = 0
                for i = 1, max, 1 do
                    local deviceId = tonumber(devs[i],10)
                    if (luup.variable_get(SWITCH_SID, "Status", deviceId) == "1") then
                        table.insert(on, deviceId)
                        n = n + 1
                    end
                end
                if (n &gt; 0) then
                    i = math.random(1, n)
                    luup.call_action(SWITCH_SID, "SetTarget", {newTargetValue="0"}, on[i])
                    luup.log("DeusExMachina: Set " .. on[i] .. " to OFF")
                    if (n &gt; 1) then
                        return 1
                    end
                end
            end
            return 0
        end
        
        -- Enable DEM by setting a new cycle stamp and calling an initial cycle directly.
        function deusEnable()
            luup.log("DeusExMachina: enabling...")
            runStamp = os.time()
            deusStep(runStamp)
        end

        -- Disable DEM and go to standby state. If we are currently cycling (as opposed to idle/waiting for sunset),
        -- turn off any controlled lights that are on.
        function deusDisable()
            local state = getVarNumeric("State", STATE_STANDBY)
            luup.log("DeusExMachina: disabling...")
            if ( state == STATE_CYCLE or state == STATE_SHUTDOWN ) then
                local devs = getDeviceList()
                local count = table.getn(devs)
                while count &gt; 0 do
                    luup.call_action(SWITCH_SID, "SetTarget", { newTargetValue="0" }, tonumber(devs[count],10))
                    count = count - 1
                end
            end
            luup.variable_set(SID, "State", STATE_STANDBY, lul_device)
        end
        
        -- Initialize.
        function deusInit(deusDevice)
            luup.log("(DeusExMachina)::(deusInit) : Starting up...")
            
            --check UI version
            checkVersion()
            
            -- Start up if we're enabled
            if (isEnabled() == 1) then
                deusEnable()
            end
        end
        
        -- Run a cycle. If we're in "bedtime" (i.e. not between our cycle period between sunset and stop),
        -- then we'll shut off any lights we've turned on and queue another run for the next sunset. Otherwise,
        -- we'll toggled one of our controlled lights, and queue (random delay, but soon) for another cycle.
        -- The shutdown of lights also occurs randomly, but can (through device state/config) have different
        -- delays, so the lights going off looks more "natural" (i.e. not all at once just slamming off).
        function deusStep(stepStampCheck)
            local stepStamp = tonumber(stepStampCheck)
            luup.log("DeusExMachina: wakeup, stamp " .. stepStampCheck)
            if (stepStamp ~= runStamp) then
                luup.log("DeusExMachina: another thread running, skipping")
                return
            end
            if (isEnabled() ~= 1) then
                luup.log("DeusExMachina: not enabled, skipping")
                return
            end
            
            local mindelay, maxdelay
            local sunset = luup.sunset()
            local now = os.time()
            local testing = getVarNumeric("TestMode", 0)
            if (testing ~= 0) then
                -- Note that TestSunset is expressed in MINUTES since midnight
                local s = getVarNumeric("TestSunset", nil)
                if (s ~= nil) then
                    local t = tonumber(s, 10)
                    local hh = math.floor(t / 60)
                    local mm = math.mod(t, 60)
                    t = os.date('*t');
                    t['hour'] = hh
                    t['min'] = mm
                    t['sec'] = 0
                    sunset = os.time(t)
                    if ( sunset &lt;= now ) then sunset = sunset + 86400 end
                    luup.log('DeusExMachina:deusStep(): TestMode on, next sunset is ' .. tostring(sunset))
                end 
            end

            if (isBedtime() == 1) then
                luup.log("DeusExMachina: Lights out time, running off cycle")
                luup.variable_set(SID, "State", STATE_SHUTDOWN, lul_device)
                mindelay = getVarNumeric("MinOffDelay", 60)
                maxdelay = getVarNumeric("MaxOffDelay", 300)
                if (turnOffLight() == 0) then
                    -- No more lights to turn off, arm for next sunset
                    luup.variable_set(SID, "State", STATE_IDLE, lul_device)
                    local delay = sunset - os.time() + math.random(mindelay,maxdelay)
                    luup.log("DeusExMachina: All lights out. Waiting for next sunset in " .. delay .. " seconds")
                    luup.call_delay("deusStep", delay, stepStamp, 1)
                    return
                end
            else
                luup.log("DeusExMachina: Running toggle cycle")
                luup.variable_set(SID, "State", STATE_CYCLE, lul_device)
                mindelay = getVarNumeric("MinCycleDelay", 300)
                maxdelay = getVarNumeric("MaxCycleDelay", 1800)
                local devs, max
                devs, max = getDeviceList()
                if (max &gt; 0) then
                    local change = math.random(1, max)
                    local deviceId = tonumber(devs[change],10)
                    if (deviceId ~= nil) then
                        local status = luup.variable_get(SWITCH_SID, "Status", deviceId)
                        if (status ~= "0") then
                            luup.call_action(SWITCH_SID, "SetTarget", {newTargetValue="0"}, deviceId)
                            luup.log("DeusExMachina: Set " .. deviceId .. " to OFF")
                        else
                            luup.call_action(SWITCH_SID, "SetTarget", {newTargetValue="1"}, deviceId)
                            luup.log("DeusExMachina: Set " .. deviceId .. " to ON")
                        end
                    end
                end
            end
            
            -- Arm for next cycle
            -- PHR??? Should we sure delay doesn't roll past LightsOutTime? Does it matter?
            local delay = math.random(mindelay, maxdelay)
            luup.call_delay("deusStep", delay, stepStamp, 1)
            luup.log("DeusExMachina: Iteration finished, next in " .. delay .. " seconds")
        end
    </functions>
    <startup>deusInit</startup>
    <actionList>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:DeusExMachina1</serviceId>
            <name>SetEnabled</name>
            <job>
                local newEnabledValue = lul_settings.NewEnabledValue
                if (newEnabledValue == "1") then
                    luup.variable_set(SID, "Enabled", 1, lul_device)
                    deusEnable()
                else
                    luup.variable_set(SID, "Enabled", 0, lul_device)
                    deusDisable()
                end
            </job>
        </action>
    </actionList>
</implementation>